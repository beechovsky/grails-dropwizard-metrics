=== MetricRegistry Beans

The plugin will discover all of the
https://dropwizard.github.io/metrics/3.1.0/apidocs/com/codahale/metrics/MetricRegistry.html[MetricRegistry]
instances that are found in the Spring application context and active them.  An application may provide
any number of `MetricRegistry` beans.

=== Default MetricRegistry Beans

The plugin automatically adds the following `MetricRegistry` beans to the Spring application context.

[cols="2*", options="header"]
|===
|Bean Name
|Type

|yammerGarbageCollectorMetricSet
|https://dropwizard.github.io/metrics/3.1.0/apidocs/com/codahale/metrics/jvm/GarbageCollectorMetricSet.html[com.codahale.metrics.jvm.GarbageCollectorMetricSet]

|yammerMemoryUsageGaugeSet
|https://dropwizard.github.io/metrics/3.1.0/apidocs/com/codahale/metrics/jvm/MemoryUsageGaugeSet.html[com.codahale.metrics.jvm.MemoryUsageGaugeSet]

|yammerThreadStatesGaugeSet
|https://dropwizard.github.io/metrics/3.1.0/apidocs/com/codahale/metrics/jvm/ThreadStatesGaugeSet.html[com.codahale.metrics.jvm.ThreadStatesGaugeSet]
|===

=== Marking Meters

[quote, The Yammer Metrics Documentation]
A meter measures the rate of events over time (e.g., “requests per second”). In addition to the mean rate, meters also
track 1-, 5-, and 15-minute moving averages.

The `grails.plugin.yammer.metrics.meters.Meterable` trait provides a `markMeter(String)` method which makes it easy
to access and increment a `Meter`.  Any class may implement the trait and take advantage of this method.

[source,groovy]
----
import grails.plugin.yammer.metrics.meters.Meterable

class SomeGroovyClass implements Meterable {

    void someMethod() {
        markMeter('myMeterName')

        // ...
    }
}
----

==== Unit Testing

When unit testing code which invokes the `markMeter(String)` method a bean named `yammerMetricsRegistry` will
need to be registed in the Spring application context.  Below is an example of that.

[source,groovy]
----
include::{projectdir}/src/test/groovy/grails/plugin/yammer/metrics/meters/MeterableSpec.groovy[]
----

=== Exposing Metrics Data

The plugin supports exposing access to metrics data through a URI in the web application.  To enable
exposing the data assign a value to the `grails.yammer.metrics.uri` property to indicate where the
data should be made available.

```
---
grails:
    yammer:
        metrics:
            uri: /checkMetrics
```

With that configuration in place a request to `/checkMetrics` will be responded to with JSON provided by all
 of the `MetricRegistry` instances that are active in the application as shown below.

```
{"version":"3.0.0","gauges":{"grails.yammer.yammerGarbageCollectorMetricSet.PS-MarkSweep.count":{"value":0},"grails.yammer.yammerGarbageCollectorMetricSet.PS-MarkSweep.time":{"value":0},"grails.yammer.yammerGarbageCollectorMetricSet.PS-Scavenge.count":{"value":9},"grails.yammer.yammerGarbageCollectorMetricSet.PS-Scavenge.time":{"value":468},"grails.yammer.yammerMemoryUsageGaugeSet.heap.committed":{"value":738197504},"grails.yammer.yammerMemoryUsageGaugeSet.heap.init":{"value":268435456},"grails.yammer.yammerMemoryUsageGaugeSet.heap.max":{"value":3817865216},"grails.yammer.yammerMemoryUsageGaugeSet.heap.usage":{"value":0.14876779767387158},"grails.yammer.yammerMemoryUsageGaugeSet.heap.used":{"value":567975400},"grails.yammer.yammerMemoryUsageGaugeSet.non-heap.committed":{"value":64880640},"grails.yammer.yammerMemoryUsageGaugeSet.non-heap.init":{"value":24576000},"grails.yammer.yammerMemoryUsageGaugeSet.non-heap.max":{"value":136314880},"grails.yammer.yammerMemoryUsageGaugeSet.non-heap.usage":{"value":0.47363680326021634},"grails.yammer.yammerMemoryUsageGaugeSet.non-heap.used":{"value":64563744},"grails.yammer.yammerMemoryUsageGaugeSet.pools.Code-Cache.committed":{"value":6160384},"grails.yammer.yammerMemoryUsageGaugeSet.pools.Code-Cache.init":{"value":2555904},"grails.yammer.yammerMemoryUsageGaugeSet.pools.Code-Cache.max":{"value":50331648},"grails.yammer.yammerMemoryUsageGaugeSet.pools.Code-Cache.usage":{"value":0.11999003092447917},"grails.yammer.yammerMemoryUsageGaugeSet.pools.Code-Cache.used":{"value":6039296},"grails.yammer.yammerMemoryUsageGaugeSet.pools.PS-Eden-Space.committed":{"value":525336576},"grails.yammer.yammerMemoryUsageGaugeSet.pools.PS-Eden-Space.init":{"value":67633152},"grails.yammer.yammerMemoryUsageGaugeSet.pools.PS-Eden-Space.max":{"value":1354760192},"grails.yammer.yammerMemoryUsageGaugeSet.pools.PS-Eden-Space.usage":{"value":0.3691370819375242},"grails.yammer.yammerMemoryUsageGaugeSet.pools.PS-Eden-Space.used":{"value":500092224},"grails.yammer.yammerMemoryUsageGaugeSet.pools.PS-Old-Gen.committed":{"value":178782208},"grails.yammer.yammerMemoryUsageGaugeSet.pools.PS-Old-Gen.init":{"value":178782208},"grails.yammer.yammerMemoryUsageGaugeSet.pools.PS-Old-Gen.max":{"value":2863136768},"grails.yammer.yammerMemoryUsageGaugeSet.pools.PS-Old-Gen.usage":{"value":0.011815351742218974},"grails.yammer.yammerMemoryUsageGaugeSet.pools.PS-Old-Gen.used":{"value":33828968},"grails.yammer.yammerMemoryUsageGaugeSet.pools.PS-Perm-Gen.committed":{"value":58720256},"grails.yammer.yammerMemoryUsageGaugeSet.pools.PS-Perm-Gen.init":{"value":22020096},"grails.yammer.yammerMemoryUsageGaugeSet.pools.PS-Perm-Gen.max":{"value":85983232},"grails.yammer.yammerMemoryUsageGaugeSet.pools.PS-Perm-Gen.usage":{"value":0.6806495480421113},"grails.yammer.yammerMemoryUsageGaugeSet.pools.PS-Perm-Gen.used":{"value":58524448},"grails.yammer.yammerMemoryUsageGaugeSet.pools.PS-Survivor-Space.committed":{"value":34078720},"grails.yammer.yammerMemoryUsageGaugeSet.pools.PS-Survivor-Space.init":{"value":11010048},"grails.yammer.yammerMemoryUsageGaugeSet.pools.PS-Survivor-Space.max":{"value":34078720},"grails.yammer.yammerMemoryUsageGaugeSet.pools.PS-Survivor-Space.usage":{"value":0.9992807241586539},"grails.yammer.yammerMemoryUsageGaugeSet.pools.PS-Survivor-Space.used":{"value":34054208},"grails.yammer.yammerMemoryUsageGaugeSet.total.committed":{"value":803078144},"grails.yammer.yammerMemoryUsageGaugeSet.total.init":{"value":293011456},"grails.yammer.yammerMemoryUsageGaugeSet.total.max":{"value":3954180096},"grails.yammer.yammerMemoryUsageGaugeSet.total.used":{"value":632539312},"grails.yammer.yammerThreadStatesGaugeSet.blocked.count":{"value":0},"grails.yammer.yammerThreadStatesGaugeSet.count":{"value":23},"grails.yammer.yammerThreadStatesGaugeSet.daemon.count":{"value":20},"grails.yammer.yammerThreadStatesGaugeSet.deadlock.count":{"value":0},"grails.yammer.yammerThreadStatesGaugeSet.deadlocks":{"value":[]},"grails.yammer.yammerThreadStatesGaugeSet.new.count":{"value":0},"grails.yammer.yammerThreadStatesGaugeSet.runnable.count":{"value":9},"grails.yammer.yammerThreadStatesGaugeSet.terminated.count":{"value":0},"grails.yammer.yammerThreadStatesGaugeSet.timed_waiting.count":{"value":9},"grails.yammer.yammerThreadStatesGaugeSet.waiting.count":{"value":5}},"counters":{},"histograms":{},"meters":{},"timers":{}}
```
